# Jekyll Digital Garden Refactoring Plan

## Executive Summary

After analyzing the full codebase structure, this Jekyll site is set up as a digital garden but is primarily functioning as a landing page. There's significant dead code and unused features that can be safely removed to simplify the codebase.

## Analysis Results

### What's Actually Being Used:
- **Layouts**: default.html, page.html (note.html unused)
- **Includes**: head.html only (6 others unused)
- **CSS**: Basic layout, theme toggle, some typography (60%+ unused)
- **JavaScript**: Theme toggle (duplicated), unused D3.js graph
- **Content**: 2 pages (index, about), no notes/posts
- **Plugins**: 2 active plugins + 1 backup file

### What's Sitting Unused:
- **Content System**: Empty _notes directory, no posts
- **Blog Features**: Recent posts, tags, reading time
- **Graph Visualization**: Complex D3.js with no data
- **Link Previews**: Hover tooltip system
- **Navigation**: Separate nav include not used

## Refactoring Plan (Prioritized by Impact vs Effort)

### üî• HIGH IMPACT, LOW EFFORT (Do First)

#### 1. Remove Dead Files
**Files to Delete:**
```
_includes/footer.html          # Not referenced anywhere
_includes/link-previews.html   # Complex unused tooltip system  
_includes/nav.html             # Navigation not used
_includes/notes_graph.html     # D3.js graph with no data
_includes/read-time.html       # Reading time calc not used
_includes/recent-posts.html    # No posts to display
_plugins/tag_generator.rb.bak  # Backup file
download-image.js              # One-off script
index.md.backup               # Backup file
```

**Why it's safe:**
- Grep searches confirm no references to these files
- No content exists to use the blog/notes features
- Backup files are redundant

**Benefit:** Removes ~500 lines of dead code, reduces confusion

#### 2. Fix JavaScript Duplication
**Problem:** Theme toggle exists in two places:
- Inline in `_layouts/default.html` (lines 910-941) 
- Standalone file `assets/js/theme-toggle.js`

**Action:** Remove standalone file, keep inline version
**Why:** Inline version is actively used, standalone is not referenced

**Benefit:** Eliminates code duplication, reduces HTTP requests

#### 3. Clean CSS Dead Code
**Remove from `_sass/_custom.scss`:**
```scss
// Lines 1469-1516: Writing list styles (no content uses this)
.writing-list, .writing-item, .date-prefix, .writing-title

// Lines 1553-1586: Note footer styles (no notes exist)
.note-footer, .note-related 

// Lines 1588-1607: Tag styles (no tags in use)
.note-tags, .post-tags, .tag

// Duplicate dark mode styles (lines 1723-1791)
@media (prefers-color-scheme: dark) { ... }
```

**Why it's safe:** These classes aren't used by any content
**Benefit:** Reduces CSS by ~200 lines, improves load time

### üî• MEDIUM IMPACT, LOW EFFORT 

#### 4. Simplify Jekyll Config
**Remove unused config from `_config.yml`:**
```yaml
# Line 132: exclude: ['_includes/notes_graph.json'] # File doesn't exist anymore
# Line 144-148: embed_tweets, open_external_links_in_new_tab # No content uses this
# Line 150: relative_permalinks # Deprecated in Jekyll 3.0+
```

**Benefit:** Cleaner config, removes deprecated settings

#### 5. Remove Unused Layout
**Delete:** `_layouts/note.html`
**Why:** No content uses this layout, site only has pages not notes/posts
**Benefit:** Simplifies template structure

#### 6. Clean _sass imports
**Current `styles.scss`:**
```scss
@import "../_sass/normalize";
@import "../_sass/code";      # Only used if code blocks exist
@import "../_sass/style";     # Conflicts with _custom.scss
@import "../_sass/custom";
```

**Action:** 
- Keep normalize and custom
- Remove code.scss (no code highlighting used)
- Remove style.scss (conflicts/duplicates custom.scss)

### üî• MEDIUM IMPACT, MEDIUM EFFORT

#### 7. Consolidate CSS Architecture  
**Problem:** Multiple conflicting SCSS files
- `_sass/_style.scss`: 277 lines, older design system
- `_sass/_custom.scss`: 500+ lines, current design (Steph Ango inspired)
- `_sass/_code.scss`: 80 lines of syntax highlighting

**Action:**
1. Remove `_sass/_style.scss` (conflicts with custom.scss)
2. Keep only essential parts of `_sass/_code.scss` 
3. Consolidate everything into `_sass/_custom.scss`

**Why:** Site uses custom.scss styling, style.scss creates conflicts
**Benefit:** Single source of truth for styling, ~300 lines removed

#### 8. Plugin Cleanup
**Keep:**
- `bidirectional_links_generator.rb` (core wiki-link functionality)
- `empty_front_matter_note_injector.rb` (needed for Obsidian integration)

**Consider removing if no notes planned:**
- Both plugins only work with content in `_notes/` directory
- If this remains a landing page site, plugins add complexity for no benefit

### üî• LOW IMPACT (Future Considerations)

#### 9. Gemfile Dependencies
**Current gems all needed:**
- jekyll: Core
- webrick: Required for Jekyll 4.2
- jekyll-relative-links: Used by plugins
- Platform-specific gems: Required for cross-platform

**No changes needed**

#### 10. Content Structure Decision
**Current state:** Site prepared for digital garden but used as landing page

**Decision needed:**
- **If keeping as landing page:** Remove all blog/notes infrastructure
- **If becoming digital garden:** Keep infrastructure, add content

## Implementation Priority

### Phase 1: Quick Wins (1-2 hours)
1. Delete dead files (9 files)
2. Remove duplicate JS file  
3. Clean unused CSS rules
4. Simplify Jekyll config

**Result:** ~60% reduction in unused code

### Phase 2: Structural Cleanup (2-3 hours)  
1. Consolidate SCSS architecture
2. Remove unused layout
3. Decide on plugin necessity

**Result:** Simplified, maintainable codebase

### Phase 3: Architecture Decision (Planning needed)
1. Decide: Landing page vs Digital garden
2. Adjust remaining infrastructure accordingly

## Risk Assessment

### ‚úÖ SAFE TO REMOVE (High Confidence):
- All unused include files (confirmed via grep)
- Backup files and one-off scripts
- Duplicate JavaScript
- CSS for non-existent content types

### ‚ö†Ô∏è PROCEED WITH CAUTION:
- Jekyll plugins (if notes are planned)
- Core layout structure
- Theme system (actively used)

### ‚ùå DO NOT REMOVE:
- `_layouts/default.html` and `page.html`
- `_includes/head.html`
- Theme CSS classes
- Active JavaScript functionality

## Expected Benefits

1. **Performance:** ~40% smaller CSS, fewer HTTP requests
2. **Maintainability:** Single source of truth for styling
3. **Clarity:** Remove confusion between unused vs active code
4. **Development Speed:** Less code to navigate and understand
5. **Build Time:** Fewer files to process

## Files Requiring Manual Review

1. **`_config.yml`** - Check if any custom settings needed
2. **`_sass/_custom.scss`** - Verify all needed styles retained
3. **Navigation structure** - Currently hardcoded in default.html

This plan prioritizes removals with immediate benefit and low risk, progressing to structural changes that require more consideration.